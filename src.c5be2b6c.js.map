{"version":3,"sources":["src/Sprite.ts","src/Drawer.ts","src/Timer.ts","src/Game.ts","src/Control.ts","src/Health/Health.ts","src/Health/LeftHealth.ts","src/Health/RightHealth.ts","src/Fighter.ts","src/Fighters/MackFighter.ts","src/Fighters/KenjiFighter.ts","src/index.ts"],"names":[],"mappings":"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","file":"src.c5be2b6c.js","sourceRoot":"..","sourcesContent":["export interface ICoordinates {\r\n  x: number\r\n  y: number\r\n}\r\n\r\nexport interface ISpriteData {\r\n  position?: ICoordinates\r\n  imgSrc: string;\r\n  scale?: number\r\n  framesMax?: number\r\n  offset?: ICoordinates\r\n}\r\n\r\nexport class Sprite {\r\n    position: ICoordinates;\r\n    width: number;\r\n    height: number;\r\n    image = new Image();\r\n    scale: number;\r\n    framesMax: number;\r\n    framesCurrent: number;\r\n    framesElapsed: number;\r\n    framesHold: number;\r\n    offset: ICoordinates;\r\n\r\n  constructor(data: ISpriteData) {\r\n    this.position = data.position || { x: 0, y: 0 }\r\n    this.width = 50;\r\n    this.height = 150;\r\n    this.image.src = data.imgSrc;\r\n    this.scale = data.scale || 1;\r\n    this.framesMax = data.framesMax || 1;\r\n    this.framesCurrent = 0\r\n    this.framesElapsed = 0\r\n    this.framesHold = 5\r\n    this.offset = data.offset || { x: 0, y: 0 }\r\n  }\r\n\r\n  draw(ctx: any) {\r\n    ctx.drawImage(\r\n      this.image,\r\n      this.framesCurrent * (this.image.width / this.framesMax),\r\n      0,\r\n      this.image.width / this.framesMax,\r\n      this.image.height,\r\n      this.position.x - this.offset.x,\r\n      this.position.y - this.offset.y,\r\n      (this.image.width / this.framesMax) * this.scale,\r\n      this.image.height * this.scale\r\n    )\r\n  }\r\n\r\n  animateFrames() {\r\n    this.framesElapsed++\r\n\r\n    if (this.framesElapsed % this.framesHold === 0) {\r\n      if (this.framesCurrent < this.framesMax - 1) {\r\n        this.framesCurrent++;\r\n      } else {\r\n        this.framesCurrent = 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  update(ctx: any) {\r\n    this.draw(ctx);\r\n    this.animateFrames();\r\n  }\r\n}\r\n","export class Drawer {\r\n  public top = 0\r\n  public left = 0\r\n  public width = 1024\r\n  public height = 567\r\n\r\n  constructor(public ctx: CanvasRenderingContext2D) {}\r\n\r\n  static init(): Drawer {\r\n    const canvas = <HTMLCanvasElement>document.createElement('canvas');\r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx) throw new Error('Error while creating context');\r\n    canvas.width = 1024;\r\n    canvas.height = 567;\r\n\r\n    document.body.appendChild(canvas);\r\n    return new Drawer(ctx);\r\n  }\r\n}\r\n","import { Game } from \"./Game\";\r\n\r\nexport class Timer {\r\n    secondsLeft = 60;\r\n    private instance: number;\r\n    private game: Game;\r\n    private width = 50;\r\n\r\n    constructor(game: Game) {\r\n        this.game = game;\r\n        this.instance = setInterval(() => this.secondsLeft--, 1000);\r\n    }\r\n\r\n    draw(ctx: any) {\r\n        const strartPoint = 1024 / 2 - 30;\r\n        ctx.fillStyle = 'white';\r\n        ctx.fillRect(strartPoint, 10, this.width, this.width);\r\n\r\n        ctx.strokeStyle = 'black';\r\n        ctx.strokeRect(strartPoint, 10, this.width, this.width);\r\n\r\n        ctx.fillStyle = \"#000000\";\r\n        ctx.font=\"26px Georgia\";\r\n        let xSwitch = 10;\r\n        if (this.secondsLeft.toString().length === 1) xSwitch = 15;\r\n        ctx.fillText(this.secondsLeft, strartPoint + xSwitch, 40, this.width);\r\n    }\r\n\r\n    private timeLeft() {\r\n        this.game.notify(undefined, {type: 'timeLeft', payload: null});\r\n    }\r\n\r\n    stopTimer() {\r\n        clearInterval(this.instance);\r\n    }\r\n\r\n    update(ctx: any) {\r\n        this.draw(ctx);\r\n\r\n        if (this.secondsLeft <= 0) {\r\n            clearInterval(this.instance);\r\n            this.timeLeft();\r\n        }\r\n    }\r\n}","import { Drawer } from './Drawer';\r\nimport { Fighter } from './Fighter';\r\nimport { Sprite } from './Sprite';\r\nimport { Timer } from './Timer';\r\n\r\nexport interface IGameData {\r\n  firstFighter: Fighter;\r\n  secondFighter: Fighter;\r\n  drawer: Drawer;\r\n  sprites: Sprite[];\r\n}\r\n\r\ninterface INotification {\r\n  type: 'attack' | 'dead' | 'timeLeft',\r\n  payload: any\r\n}\r\n\r\nexport interface Mediator {\r\n  notify(sender: Fighter, event: INotification): void;\r\n  active: boolean;\r\n}\r\nexport class Game implements IGameData, Mediator {\r\n  firstFighter: Fighter;\r\n  secondFighter: Fighter;\r\n  drawer: Drawer;\r\n  sprites: Sprite[];\r\n  timer: Timer;\r\n  active = true;\r\n\r\n  constructor(gameData: IGameData) {\r\n    this.firstFighter = gameData.firstFighter;\r\n    this.secondFighter = gameData.secondFighter;\r\n    this.firstFighter.setMediator(this);\r\n    this.secondFighter.setMediator(this);\r\n    this.drawer = gameData.drawer;\r\n    this.sprites = gameData.sprites;\r\n    this.timer = new Timer(this);\r\n  }\r\n\r\n  private activeAttackCollision() : boolean {\r\n    return (\r\n      this.firstFighter.attackBox.position.x + this.firstFighter.attackBox.width >=\r\n        this.secondFighter.position.x &&\r\n      this.firstFighter.attackBox.position.x <=\r\n        this.secondFighter.position.x + this.secondFighter.width &&\r\n      this.firstFighter.attackBox.position.y + this.firstFighter.attackBox.height >=\r\n        this.secondFighter.position.y &&\r\n      this.firstFighter.attackBox.position.y <= this.secondFighter.position.y + this.secondFighter.height\r\n    )\r\n  }\r\n\r\n  notify(sender: Fighter | undefined, event: INotification): void {\r\n    if (event.type === 'attack') {\r\n      const receiver = sender === this.firstFighter ? this.secondFighter : this.firstFighter;\r\n      if (this.activeAttackCollision()) receiver.takeHit();\r\n    } else if (event.type === 'dead') {\r\n      this.active = false;\r\n      this.timer.stopTimer();\r\n      const winner = sender === this.firstFighter ? this.secondFighter : this.firstFighter;\r\n      this.showResultMessage(`${winner.name} WIN!`);\r\n    } else if (event.type === 'timeLeft') {\r\n      this.active = false;\r\n      const firstFighterHealth = this.firstFighter.health.getHealth();\r\n      const secondFighterHealth = this.secondFighter.health.getHealth();\r\n\r\n      let message = 'Draw!';\r\n      if (firstFighterHealth > secondFighterHealth) {\r\n        message =`${this.firstFighter.name} WIN!`;\r\n        this.secondFighter.kill();\r\n      }\r\n      else if(firstFighterHealth < secondFighterHealth) {\r\n        message =`${this.secondFighter.name} WIN!`;\r\n        this.firstFighter.kill();\r\n      }\r\n      this.showResultMessage(message);\r\n    }\r\n  }\r\n\r\n  animate() {\r\n    window.requestAnimationFrame(this.animate.bind(this))\r\n    this.drawer.ctx.fillStyle = 'black';\r\n    this.drawer.ctx.fillRect(0, 0, this.drawer.width, this.drawer.height);\r\n\r\n    this.sprites.forEach((sprite) => sprite.update(this.drawer.ctx));\r\n\r\n    if(!(this.firstFighter.control && this.secondFighter.control)) {\r\n      throw new Error('Control not provided');\r\n    }\r\n\r\n    this.firstFighter.update(this.drawer.ctx);\r\n    this.secondFighter.update(this.drawer.ctx);\r\n\r\n    this.timer.update(this.drawer.ctx);\r\n  }\r\n\r\n  private showResultMessage(msg: string) {\r\n    const ctx = this.drawer.ctx;\r\n    ctx.fillStyle = \"#000000\";\r\n    ctx.font=\"50px Georgia\";\r\n\r\n    const textSwitch = 1024 / 2 - msg.length * 15 / 2;\r\n    ctx.fillText(msg, textSwitch, 567 / 2, 100);\r\n  }\r\n}\r\n","import { Fighter } from './Fighter'\r\n\r\ninterface IMovementMap {\r\n  left: string;\r\n  right: string;\r\n  up: string;\r\n  attack: string;\r\n}\r\n\r\nexport class Control {\r\n  public canAttack = true;\r\n  public isJumped = false;\r\n\r\n  constructor(public fighter: Fighter, public movementMap: IMovementMap) {\r\n    fighter.control = this;\r\n    window.addEventListener('keydown', this.keydownHandle.bind(this));\r\n    window.addEventListener('keyup', this.keyupHandle.bind(this));\r\n  }\r\n\r\n  keyupHandle(event: KeyboardEvent) {\r\n    if (this.fighter.dead) return;\r\n\r\n    if (event.key === this.movementMap.left) {\r\n      this.fighter.stop();\r\n    } else if (event.key === this.movementMap.right) {\r\n      this.fighter.stop();\r\n    }\r\n  }\r\n\r\n  keydownHandle(event: KeyboardEvent) {\r\n    if (this.fighter.dead) return;\r\n\r\n    if (event.key === this.movementMap.left) {\r\n      this.fighter.moveBack();\r\n    } else if (event.key === this.movementMap.right) {\r\n      this.fighter.move();\r\n    } else if (event.key === this.movementMap.up && !this.isJumped) {\r\n      this.fighter.jump();\r\n      this.isJumped = true;\r\n    } else if (event.key === this.movementMap.attack && this.canAttack) {\r\n      this.fighter.attack();\r\n      this.canAttack = false;\r\n    }\r\n  }\r\n}\r\n","import { Fighter } from \"../Fighter\";\r\n\r\nexport abstract class Health {\r\n    protected health = 100;\r\n    protected height = 30;\r\n    protected fighter: Fighter;\r\n    protected healthLen = (1024 - 100) / 2;\r\n\r\n    abstract gap: number;\r\n    abstract startFrom: number;\r\n    abstract nameGap: number;\r\n    abstract textStart: number;\r\n    abstract shiftMultiply: number;\r\n\r\n    constructor(fighter: Fighter) {\r\n        this.fighter = fighter;\r\n    }\r\n\r\n    minusHealth(val: number) {\r\n        this.health -= val;\r\n    }\r\n\r\n    getHealth() {\r\n        return this.health;\r\n    }\r\n\r\n    hasHealth() {\r\n        return this.health > 0;\r\n    }\r\n\r\n    update(ctx: any) {\r\n        ctx.fillStyle = 'red';\r\n        ctx.fillRect(this.startFrom, 20, this.healthLen, this.height);\r\n\r\n        ctx.strokeStyle = 'black';\r\n        ctx.strokeRect(this.startFrom, 20, this.healthLen, this.height);\r\n        \r\n        ctx.fillStyle = 'blue';\r\n        const currentHealth = this.healthLen * this.health / 100;\r\n        const healthShift = (this.healthLen - currentHealth) * this.shiftMultiply + this.startFrom;\r\n        const healthStart = this.health > 0 ? healthShift : 0;\r\n        ctx.fillRect(healthStart, 20, currentHealth, this.height);\r\n        \r\n        ctx.fillStyle = \"#000000\";\r\n        ctx.font=\"20px Georgia\";\r\n        ctx.fillText(this.fighter.name, this.startFrom + this.textStart, this.height + 10);\r\n    }\r\n}","import { Fighter } from \"../Fighter\";\r\nimport { Health } from \"./Health\";\r\n\r\nexport class LeftHealth extends Health {\r\n    public gap: number;\r\n    public currentHealthGap: number;\r\n    public nameGap: number;\r\n    public textStart: number;\r\n    public startFrom: number;\r\n    public shiftMultiply: number;\r\n\r\n    constructor(fighter: Fighter) {\r\n        super(fighter);\r\n        this.gap = 0;\r\n        this.startFrom = 10 + this.gap;\r\n        this.shiftMultiply = 0;\r\n        this.currentHealthGap = 0;\r\n        this.nameGap = 0;\r\n        this.textStart = 20;\r\n    }\r\n}","import { Fighter } from \"../Fighter\";\r\nimport { Health } from \"./Health\";\r\n\r\nexport class RightHealth extends Health {\r\n    public gap: number;\r\n    public nameGap: number;\r\n    public textStart: number;\r\n    public startFrom: number;\r\n    public shiftMultiply: number;\r\n\r\n    constructor(fighter: Fighter) {\r\n        super(fighter);\r\n        this.shiftMultiply = 1;\r\n        this.gap = 80;\r\n        this.startFrom = this.gap + this.healthLen;\r\n        this.nameGap = 0;\r\n        this.textStart = this.healthLen - 60;\r\n    }\r\n}","import { Control } from './Control';\r\nimport { Mediator } from './Game';\r\nimport { Health } from './Health/Health';\r\nimport { LeftHealth } from './Health/LeftHealth';\r\nimport { RightHealth } from './Health/RightHealth';\r\nimport { ICoordinates, ISpriteData, Sprite } from './Sprite';\r\n\r\ninterface IFighterData {\r\n  position: ICoordinates\r\n  velocity: ICoordinates\r\n  imgSrc: string\r\n  name: string\r\n  framesMax: number\r\n  attackFrame: number\r\n  scale: number\r\n  offset: ICoordinates\r\n  fighterNum: 1 | 2,\r\n  sprites: {\r\n    idle: Sprite;\r\n    run: Sprite;\r\n    jump: Sprite;\r\n    fall: Sprite;\r\n    attack1: Sprite;\r\n    takeHit: Sprite;\r\n    death: Sprite;\r\n  }\r\n  attackBox: {\r\n    offset: ICoordinates\r\n    width: number\r\n    height: number\r\n  }\r\n}\r\n\r\nclass FighterComponent extends Sprite {\r\n  protected mediator: Mediator;\r\n\r\n  constructor(spriteData: ISpriteData, mediator?: Mediator) {\r\n      super(spriteData);\r\n      this.mediator = mediator!;\r\n  }\r\n\r\n  public setMediator(mediator: Mediator): void {\r\n      this.mediator = mediator;\r\n  }\r\n}\r\n\r\nexport class Fighter extends FighterComponent {\r\n  public velocity: ICoordinates\r\n  public attackBox: {\r\n    position: ICoordinates\r\n    offset: ICoordinates\r\n    width: number\r\n    height: number\r\n  }\r\n  public lastKey: undefined | string;\r\n  public name: string;\r\n  public health: Health;\r\n  public dead: boolean\r\n  public sprites: { [key: string]: Sprite };\r\n  public control: Control | undefined;\r\n  public gravity = 0.7;\r\n  public attackFrame: number;\r\n  private killed = false;\r\n  public fighterNum: 1 | 2;\r\n\r\n  constructor(data: IFighterData) {\r\n    super({\r\n      position: data.position,\r\n      imgSrc: data.imgSrc,\r\n      scale: data.scale,\r\n      framesMax: data.framesMax,\r\n      offset: data.offset\r\n    });\r\n    this.velocity = data.velocity;\r\n    this.width = 50;\r\n    this.height = 150;\r\n    this.attackBox = {\r\n      position: { x: this.position.x, y: this.position.y },\r\n      offset: data.attackBox.offset,\r\n      width: data.attackBox.width,\r\n      height: data.attackBox.height\r\n    };\r\n    this.name = data.name;\r\n    this.fighterNum = data.fighterNum;\r\n    this.health = data.fighterNum === 1 ? new LeftHealth(this) : new RightHealth(this);\r\n    this.framesCurrent = 0;\r\n    this.framesElapsed = 0;\r\n    this.framesHold = 5;\r\n    this.attackFrame = data.attackFrame;\r\n    this.dead = false;\r\n    this.sprites = data.sprites;\r\n  }\r\n  private disabled(): boolean {\r\n    return this.dead || this.killed || !this.mediator.active!\r\n  }\r\n\r\n  private setSpriteState(sprite: Sprite) {\r\n    this.image = sprite.image;\r\n    this.framesMax = sprite.framesMax;\r\n    this.framesCurrent = 0;\r\n  }\r\n\r\n  move() {\r\n    if (this.disabled()) return;\r\n    this.setSpriteState(this.sprites.run);\r\n    this.velocity.x = +5;\r\n  }\r\n  \r\n  moveBack() {\r\n    if (this.disabled()) return;\r\n    this.setSpriteState(this.sprites.run);\r\n    this.velocity.x = -5;\r\n  }\r\n  \r\n  stop() {\r\n    if (this.disabled()) return;\r\n    this.setSpriteState(this.sprites.idle);\r\n    this.velocity.x = 0;\r\n  }\r\n\r\n  attack() {\r\n    if (this.disabled()) return;\r\n    this.setSpriteState(this.sprites.attack1);\r\n  }\r\n  \r\n  jump() {\r\n    if (this.disabled()) return;\r\n    this.setSpriteState(this.sprites.jump);\r\n    this.velocity.y = -20;\r\n  }\r\n\r\n  kill() {\r\n    if (this.image !== this.sprites.death.image) {\r\n      this.setSpriteState(this.sprites.death);\r\n      this.killed = true;\r\n    }\r\n  }\r\n\r\n  takeHit() {\r\n    this.health.minusHealth(20);\r\n\r\n    if (!this.health.hasHealth()) return this.kill();\r\n    this.setSpriteState(this.sprites.takeHit);\r\n  }\r\n\r\n  update(ctx: any) {\r\n    this.draw(ctx);\r\n    if (!this.dead) this.animateFrames();\r\n    if (this.image === this.sprites.idle.image) this.control!.canAttack = true;\r\n\r\n    // move attack box\r\n    this.attackBox.position.x = this.position.x + this.attackBox.offset.x;\r\n    this.attackBox.position.y = this.position.y + this.attackBox.offset.y;\r\n\r\n    this.position.x += this.velocity.x;\r\n    this.position.y += this.velocity.y;\r\n\r\n    this.health.update(ctx);\r\n\r\n    // gravity function\r\n    if (this.position.y + this.height + this.velocity.y >= 567 - 96) {\r\n      this.velocity.y = 0\r\n      this.position.y = 330\r\n    } else this.velocity.y += this.gravity;\r\n\r\n\r\n    // attack notify\r\n    if (this.image === this.sprites.attack1.image && this.framesCurrent === this.framesMax - 1) {\r\n      this.mediator.notify(this, {type: 'attack', payload: ''});\r\n    }\r\n\r\n    // stop attack\r\n    if (this.image === this.sprites.attack1.image && this.framesCurrent === this.framesMax - 1) {\r\n      this.setSpriteState(this.sprites.idle);\r\n      this.control!.canAttack = true;\r\n    }\r\n\r\n    // change jumping sprites\r\n    if (this.velocity.y < 0) this.setSpriteState(this.sprites.jump);\r\n    else if (this.velocity.y > 0) this.setSpriteState(this.sprites.fall);\r\n    \r\n    // change skin after jump\r\n    if (this.control?.isJumped && this.position.y === 330) {\r\n      this.setSpriteState(this.sprites.idle);\r\n      this.control!.isJumped = false;\r\n      this.control.canAttack = true;\r\n    }\r\n\r\n    // change skin after taking a hit\r\n    if (this.image === this.sprites.takeHit.image && this.framesCurrent === this.framesMax - 1) {\r\n      this.setSpriteState(this.sprites.idle);\r\n    }\r\n\r\n    // dead\r\n    if (this.image === this.sprites.death.image && this.framesCurrent === this.framesMax - 1) {\r\n      this.dead = true;\r\n      this.mediator.notify(this, {type: 'dead', payload: ''});\r\n    }\r\n  }\r\n}\r\n","import { Sprite } from '../Sprite';\r\nimport { Fighter } from '../Fighter';\r\n\r\nimport { default as mackAtack } from '../../images/mack/Attack1.png';\r\nimport { default as mackIdle } from '../../images/mack/Idle.png';\r\nimport { default as mackRun } from '../../images/mack/Run.png';\r\nimport { default as mackJump } from '../../images/mack/Jump.png';\r\nimport { default as mackFall } from '../../images/mack/Fall.png';\r\nimport { default as mackTakeHit } from '../../images/mack/TakeHit.png';\r\nimport { default as mackDeath } from '../../images/mack/Death.png';\r\n\r\nconst mackData = {\r\n    position: { x: 250, y: 335 },\r\n    velocity: { x: 0, y: 0 },\r\n    imgSrc: mackIdle,\r\n    framesMax: 8,\r\n    scale: 2.5,\r\n    offset: { x: 215, y: 157 },\r\n    attackFrame: 4,\r\n    fighterNum: 1 as 1 | 2,\r\n    name: 'Mack',\r\n    sprites: {\r\n      idle: new Sprite({ imgSrc: mackIdle, framesMax: 8 }),\r\n      run: new Sprite({ imgSrc: mackRun, framesMax: 8 }),\r\n      jump: new Sprite({ imgSrc: mackJump, framesMax: 2 }),\r\n      fall: new Sprite({ imgSrc: mackFall, framesMax: 2 }),\r\n      attack1: new Sprite({ imgSrc: mackAtack, framesMax: 6 }),\r\n      takeHit: new Sprite({ imgSrc: mackTakeHit, framesMax: 4 }),\r\n      death: new Sprite({ imgSrc: mackDeath, framesMax: 6 })\r\n    },\r\n    attackBox: {\r\n      offset: { x: 100, y: 50 },\r\n      width: 160,\r\n      height: 50\r\n    }\r\n  }\r\n\r\nexport const mackFighter = new Fighter(mackData);","import { Sprite } from '../Sprite'\r\nimport { Fighter } from '../Fighter'\r\n\r\nimport { default as kenjiAtack } from '../../images/kenji/Attack1.png'\r\nimport { default as kenjiIdle } from '../../images/kenji/Idle.png'\r\nimport { default as kenjiRun } from '../../images/kenji/Run.png'\r\nimport { default as kenjiJump } from '../../images/kenji/Jump.png'\r\nimport { default as kenjiFall } from '../../images/kenji/Fall.png'\r\nimport { default as kenjiTakeHit } from '../../images/kenji/TakeHit.png'\r\nimport { default as kenjiDeath } from '../../images/kenji/Death.png';\r\n\r\nconst kenjiData = {\r\n  position: { x: 750, y: 335 },\r\n  velocity: { x: 0, y: 0 },\r\n  imgSrc: kenjiIdle,\r\n  framesMax: 4,\r\n  scale: 2.5,\r\n  offset: { x: 215, y: 170 },\r\n  attackFrame: 1,\r\n  fighterNum: 2 as 1 | 2,\r\n  name: 'Kenji',\r\n  sprites: {\r\n    idle: new Sprite({ imgSrc: kenjiIdle, framesMax: 4 }),\r\n    run: new Sprite({ imgSrc: kenjiRun, framesMax: 8 }),\r\n    jump: new Sprite({ imgSrc: kenjiJump, framesMax: 2 }),\r\n    fall: new Sprite({ imgSrc: kenjiFall, framesMax: 2 }),\r\n    attack1: new Sprite({ imgSrc: kenjiAtack, framesMax: 4 }),\r\n    takeHit: new Sprite({ imgSrc: kenjiTakeHit, framesMax: 3 }),\r\n    death: new Sprite({ imgSrc: kenjiDeath, framesMax: 7 })\r\n  },\r\n  attackBox: {\r\n    offset: { x: 100, y: 50 },\r\n    width: 160,\r\n    height: 50\r\n  }\r\n}\r\n\r\nexport const kenjiFighter = new Fighter(kenjiData)\r\n","import { Sprite } from './Sprite';\r\nimport { Drawer } from './Drawer';\r\nimport { Game } from './Game';\r\nimport { Control } from './Control';\r\n\r\nimport { default as bgImage } from '../images/background.png';\r\nimport { default as shopImage } from '../images/shop.png';\r\n\r\nimport { mackFighter } from './Fighters/MackFighter';\r\nimport { kenjiFighter } from './Fighters/KenjiFighter';\r\n\r\nconst drawer = Drawer.init();\r\n\r\nconst shop = new Sprite({\r\n  position: { x: 650, y: 225 },\r\n  imgSrc: shopImage,\r\n  scale: 2,\r\n  framesMax: 6\r\n});\r\nconst background = new Sprite({ imgSrc: bgImage });\r\n\r\nconst sprites = [background, shop];\r\n\r\nnew Control(mackFighter, { left: 'a', right: 'd', up: 'w', attack: ' ' });\r\nnew Control(kenjiFighter, {\r\n  left: 'ArrowLeft',\r\n  right: 'ArrowRight',\r\n  up: 'ArrowUp',\r\n  attack: 'ArrowDown'\r\n});\r\n\r\nconst game = new Game({\r\n  firstFighter: mackFighter,\r\n  secondFighter: kenjiFighter,\r\n  sprites,\r\n  drawer\r\n});\r\n\r\ngame.animate();\r\n"]}